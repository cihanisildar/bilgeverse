// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TUTOR
  ASISTAN
  STUDENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  AWARD
  REDEEM
}

model EventType {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  events      Event[]  @relation("EventTypeEvents")
}

enum EventStatus {
  YAKINDA
  DEVAM_EDIYOR
  TAMAMLANDI
  IPTAL_EDILDI
}

enum EventScope {
  GLOBAL
  GROUP
}

enum PeriodStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ParticipantStatus {
  REGISTERED
  ATTENDED
  ABSENT
}

model Period {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      PeriodStatus @default(INACTIVE)
  totalWeeks  Int          @default(8)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  events               Event[]                @relation("PeriodEvents")
  pointsTransactions   PointsTransaction[]    @relation("PeriodPointsTransactions")
  experienceTransactions ExperienceTransaction[] @relation("PeriodExperienceTransactions")
  itemRequests         ItemRequest[]          @relation("PeriodItemRequests")
  wishes               Wish[]                 @relation("PeriodWishes")
  studentNotes         StudentNote[]          @relation("PeriodStudentNotes")
  studentReports       StudentReport[]        @relation("PeriodStudentReports")
  rollbacks            TransactionRollback[]  @relation("PeriodRollbacks")
  announcements        Announcement[]         @relation("PeriodAnnouncements")
  weeklyReports        WeeklyReport[]         @relation("PeriodWeeklyReports")

  @@index([status])
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  email           String           @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole
  points          Int              @default(0)
  experience      Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  avatarUrl       String?
  phone           String?
  specialization  String?
  bio             String?          @db.Text
  preferences     Json?
  isActive        Boolean          @default(true)  // Active/Passive status for period participation
  statusChangedAt DateTime?        // When status was last changed
  statusChangedBy String?          // Who changed the status (admin/tutor)

  // Relations
  classroom       Classroom?       @relation("ClassroomTutor")
  students        User[]           @relation("TutorStudents")
  tutor           User?            @relation("TutorStudents", fields: [tutorId], references: [id])
  tutorId         String?
  classroomStudents Classroom?     @relation("ClassroomStudents", fields: [studentClassroomId], references: [id])
  studentClassroomId String?

  // ASISTAN-TUTOR relationship
  assistedTutor   User?            @relation("AsistanTutor", fields: [assistedTutorId], references: [id])
  assistedTutorId String?
  asistans        User[]           @relation("AsistanTutor")

  // Event relations
  createdEvents   Event[]          @relation("EventCreator")
  eventsForTutor  Event[]          @relation("TutorEvents")
  eventParticipations EventParticipant[] @relation("UserParticipations")

  // Store relations
  studentRequests ItemRequest[]    @relation("StudentRequests")
  tutorApprovals  ItemRequest[]    @relation("TutorApprovals")

  // Points relations
  studentPoints   PointsTransaction[] @relation("StudentPoints")
  tutorPoints     PointsTransaction[] @relation("TutorPoints")

  // Notes relations
  studentNotes    StudentNote[]    @relation("StudentNotes")
  tutorNotes      StudentNote[]    @relation("TutorNotes")

  // Reports relations
  studentReports  StudentReport[]  @relation("StudentReports")
  tutorReports    StudentReport[]  @relation("TutorReports")

  // Registration relations
  processedRegistrations RegistrationRequest[]

  // Experience relations
  experienceReceived ExperienceTransaction[] @relation("StudentExperience")
  experienceGiven   ExperienceTransaction[] @relation("TutorExperience")

  // Wish relations
  wishes          Wish[]           @relation("StudentWishes")

  // New relation
  createdCards PointEarningCard[] @relation("AdminCards")
  createdReasons PointReason[] @relation("AdminReasons")

  // Announcement relations
  createdAnnouncements Announcement[] @relation("AdminAnnouncements")

  // Rollback relations
  rollbacksAsStudent TransactionRollback[] @relation("RollbackStudent")
  rollbacksAsAdmin   TransactionRollback[] @relation("RollbackAdmin")

  // Weekly report relations
  weeklyReports      WeeklyReport[]       @relation("UserWeeklyReports")
  reviewedReports    WeeklyReport[]       @relation("AdminReviewedReports")
  createdQuestions   WeeklyReportQuestion[] @relation("AdminQuestions")

  @@index([tutorId])
}

model Classroom {
  id            String    @id @default(uuid())
  name          String    @default("Sınıf")
  description   String?   @default("Öğretmen ve öğrencileri")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  tutor         User      @relation("ClassroomTutor", fields: [tutorId], references: [id])
  tutorId       String    @unique // One tutor per classroom
  students      User[]    @relation("ClassroomStudents")
}

model Event {
  id            String    @id @default(uuid())
  title         String
  description   String
  startDateTime DateTime
  endDateTime   DateTime?
  location      String    @default("Online")
  customName    String?   // Used when event type is "Others"
  capacity      Int       @default(20)
  points        Int       @default(0)
  experience    Int       @default(0)
  tags          String[]
  status        EventStatus @default(YAKINDA)
  eventScope    EventScope @default(GROUP)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Period relation
  periodId      String
  period        Period    @relation("PeriodEvents", fields: [periodId], references: [id])

  // Event type relation
  eventTypeId   String
  eventType     EventType @relation("EventTypeEvents", fields: [eventTypeId], references: [id])

  // Relations
  createdBy     User      @relation("EventCreator", fields: [createdById], references: [id])
  createdById   String
  participants  EventParticipant[] @relation("EventParticipations")
  createdForTutor User?   @relation("TutorEvents", fields: [createdForTutorId], references: [id])
  createdForTutorId String?

  @@index([periodId])
}

model EventParticipant {
  id            String    @id @default(uuid())
  status        ParticipantStatus @default(REGISTERED)
  registeredAt  DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  event         Event     @relation("EventParticipations", fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String
  user          User      @relation("UserParticipations", fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  // Unique constraint to prevent duplicate participants
  @@unique([eventId, userId])
}

model StoreItem {
  id              String    @id @default(uuid())
  name            String    @unique
  description     String
  pointsRequired  Int
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  itemRequests    ItemRequest[]
}

model RegistrationRequest {
  id              String    @id @default(uuid())
  username        String
  email           String
  password        String
  firstName       String?
  lastName        String?
  requestedRole   UserRole  @default(STUDENT)
  status          RequestStatus @default(PENDING)
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  processedBy     User?     @relation(fields: [processedById], references: [id])
  processedById   String?
}

model ItemRequest {
  id          String    @id @default(uuid())
  status      RequestStatus @default(PENDING)
  pointsSpent Int
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Period relation
  periodId    String
  period      Period    @relation("PeriodItemRequests", fields: [periodId], references: [id])

  // Relations
  student     User      @relation("StudentRequests", fields: [studentId], references: [id])
  studentId   String
  tutor       User      @relation("TutorApprovals", fields: [tutorId], references: [id])
  tutorId     String
  item        StoreItem @relation(fields: [itemId], references: [id])
  itemId      String

  @@index([periodId])
}

model PointsTransaction {
  id          String    @id @default(uuid())
  points      Int
  type        TransactionType
  reason      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rolledBack  Boolean   @default(false)

  // Period relation
  periodId    String
  period      Period    @relation("PeriodPointsTransactions", fields: [periodId], references: [id])

  // Relations
  student     User      @relation("StudentPoints", fields: [studentId], references: [id])
  studentId   String
  tutor       User      @relation("TutorPoints", fields: [tutorId], references: [id])
  tutorId     String
  pointReason PointReason? @relation("ReasonTransactions", fields: [pointReasonId], references: [id])
  pointReasonId String?

  @@index([periodId])
}

model ExperienceTransaction {
  id          String    @id @default(uuid())
  amount      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rolledBack  Boolean   @default(false)

  // Period relation
  periodId    String
  period      Period    @relation("PeriodExperienceTransactions", fields: [periodId], references: [id])

  // Relations
  student     User      @relation("StudentExperience", fields: [studentId], references: [id])
  studentId   String
  tutor       User      @relation("TutorExperience", fields: [tutorId], references: [id])
  tutorId     String

  @@index([periodId])
}

model Wish {
  id          String      @id @default(uuid())
  title       String
  description String      @db.Text
  response    String?     @db.Text
  respondedAt DateTime?
  respondedBy String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Period relation
  periodId    String
  period      Period      @relation("PeriodWishes", fields: [periodId], references: [id])

  // Relations
  student     User        @relation("StudentWishes", fields: [studentId], references: [id])
  studentId   String

  @@index([periodId])
}

model StudentNote {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Period relation
  periodId  String
  period    Period   @relation("PeriodStudentNotes", fields: [periodId], references: [id])

  // Relations
  student   User     @relation("StudentNotes", fields: [studentId], references: [id])
  studentId String
  tutor     User     @relation("TutorNotes", fields: [tutorId], references: [id])
  tutorId   String

  @@index([studentId])
  @@index([tutorId])
  @@index([periodId])
}

model StudentReport {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Period relation
  periodId  String
  period    Period   @relation("PeriodStudentReports", fields: [periodId], references: [id])

  // Relations
  student   User     @relation("StudentReports", fields: [studentId], references: [id])
  studentId String
  tutor     User     @relation("TutorReports", fields: [tutorId], references: [id])
  tutorId   String

  @@index([studentId])
  @@index([tutorId])
  @@index([periodId])
}

model PointEarningCard {
  id          String    @id @default(uuid())
  title       String
  description String
  points      Int
  minPoints   Int?      // Minimum points for range
  maxPoints   Int?      // Maximum points for range
  icon        String?   // Store the icon name or URL (optional)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  // Relations
  createdBy   User      @relation("AdminCards", fields: [createdById], references: [id])
  createdById String
}

model PointReason {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy   User      @relation("AdminReasons", fields: [createdById], references: [id])
  createdById String
  transactions PointsTransaction[] @relation("ReasonTransactions")
}

model Announcement {
  id          String    @id @default(uuid())
  title       String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Period relation
  periodId    String
  period      Period    @relation("PeriodAnnouncements", fields: [periodId], references: [id])

  // Relations
  createdBy   User      @relation("AdminAnnouncements", fields: [createdById], references: [id])
  createdById String

  @@index([periodId])
}

model TransactionRollback {
  id              String   @id @default(uuid())
  transactionId    String
  transactionType  String // "POINTS" or "EXPERIENCE"
  studentId        String
  adminId          String
  reason           String
  createdAt        DateTime @default(now())

  // Period relation
  periodId        String
  period          Period   @relation("PeriodRollbacks", fields: [periodId], references: [id])

  student          User     @relation("RollbackStudent", fields: [studentId], references: [id])
  admin            User     @relation("RollbackAdmin", fields: [adminId], references: [id])

  @@index([periodId])
}

enum WeeklyReportStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum AttendanceStatus {
  YAPILDI      // ✓
  YAPILMADI    // X
  YOKTU        // O - For variable criteria only
}

model WeeklyReport {
  id                   String              @id @default(uuid())
  weekNumber           Int                 // 1-8 for the 8-week period
  status               WeeklyReportStatus  @default(DRAFT)
  submissionDate       DateTime?
  reviewDate           DateTime?
  reviewNotes          String?             @db.Text
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  // Period relation
  periodId             String
  period               Period              @relation("PeriodWeeklyReports", fields: [periodId], references: [id])

  // User relation (TUTOR or ASISTAN)
  userId               String
  user                 User                @relation("UserWeeklyReports", fields: [userId], references: [id])

  // Reviewed by admin
  reviewedById         String?
  reviewedBy           User?               @relation("AdminReviewedReports", fields: [reviewedById], references: [id])

  // Fixed criteria responses
  fixedCriteria        WeeklyReportFixedCriteria?

  // Variable criteria responses
  variableCriteria     WeeklyReportVariableCriteria?

  // Comments for each week
  comments             String?             @db.Text

  // Points awarded for this week's report
  pointsAwarded        Int                 @default(0)

  // Dynamic question responses
  questionResponses    WeeklyReportQuestionResponse[]

  @@unique([userId, periodId, weekNumber])
  @@index([periodId])
  @@index([userId])
  @@index([weekNumber])
}

model WeeklyReportFixedCriteria {
  id                              String            @id @default(uuid())
  reportId                        String            @unique
  report                          WeeklyReport      @relation(fields: [reportId], references: [id], onDelete: Cascade)

  // For TUTOR role
  weeklyMeeting                   AttendanceStatus? // Haftalık sohbetinize katıldınız mı?
  groupMeeting                    AttendanceStatus? // Haftalık buluşmanıza katıldınız mı?
  calledAbsentStudents           AttendanceStatus? // Gelmeyen öğrencileri aradınız mı?
  curriculumEducation            AttendanceStatus? // Müfredat eğitimini işlediniz mi?
  groupActivity                  AttendanceStatus? // Gurubunuza veya genele bir etkinlik yaptınız mı?
  individualAttention           AttendanceStatus? // Haftalık buluşma dışında gurubunuzdaki bir gençle veya gençlerle bir arada bulunup ilgi gösterdiniz mi?

  // For ASISTAN role (different criteria)
  weeklyMeetingAsistan           AttendanceStatus? // Haftalık sohbetinize katıldınız mı?
  groupMeetingAsistan            AttendanceStatus? // Haftalık buluşmanıza katıldınız mı?
  informationMessages            AttendanceStatus? // Özel günlerde gurubu bilgilendirme mesajları paylaşıldı mı?
  bilgeverseDataEntry           AttendanceStatus? // Bilgeverse'e öğrenci veri girişi yaptınız mı?
  groupActivityAsistan          AttendanceStatus? // Gurubunuza veya genele bir etkinlik yaptınız mı?
  individualAttentionAsistan    AttendanceStatus? // Haftalık buluşma dışında gurubunuzdaki bir gençle veya gençlerle bir arada bulunup ilgi gösterdiniz mi?
  workshopParticipation         AttendanceStatus? // Rehber Yardımcılığının yanında Bir Atölye Sorumlusu ise Atölye Çalışmalarına Katıldı mı?
}

model WeeklyReportVariableCriteria {
  id                              String            @id @default(uuid())
  reportId                        String            @unique
  report                          WeeklyReport      @relation(fields: [reportId], references: [id], onDelete: Cascade)

  // Variable criteria (same for both TUTOR and ASISTAN)
  internalTraining               AttendanceStatus? // Dernek içi eğitim ve programlara katıldınız mı?
  jointActivityLeadership        AttendanceStatus? // Ortak faaliyette gurubunuzun başında bulundunuz mu?
  originalActivity               AttendanceStatus? // Orijinal bir etkinlik ürettiniz mi?

  // Only for TUTOR
  parentMeeting                  AttendanceStatus? // Gençlerin Aileleriyle Tanıştınız mı?
}

enum QuestionType {
  FIXED
  VARIABLE
}

model WeeklyReportQuestion {
  id                String         @id @default(uuid())
  text              String         @db.Text
  type              QuestionType   // FIXED or VARIABLE
  targetRole        UserRole       // TUTOR, ASISTAN, or both
  orderIndex        Int            // For display ordering
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  createdBy         User           @relation("AdminQuestions", fields: [createdById], references: [id])
  createdById       String

  // Question responses
  responses         WeeklyReportQuestionResponse[]

  @@index([type, targetRole, isActive])
  @@index([orderIndex])
}

model WeeklyReportQuestionResponse {
  id                String            @id @default(uuid())
  response          AttendanceStatus  // YAPILDI, YAPILMADI, YOKTU
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  question          WeeklyReportQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId        String
  report            WeeklyReport      @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId          String

  @@unique([questionId, reportId])
  @@index([reportId])
}