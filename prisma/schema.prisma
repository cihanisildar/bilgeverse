// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TUTOR
  STUDENT
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionType {
  AWARD
  REDEEM
}

enum EventType {
  CEVRIMICI
  YUZ_YUZE
  KARMA
}

enum EventStatus {
  YAKINDA
  DEVAM_EDIYOR
  TAMAMLANDI
  IPTAL_EDILDI
}

enum EventScope {
  GLOBAL
  GROUP
}

enum ParticipantStatus {
  REGISTERED
  ATTENDED
  ABSENT
}

model User {
  id              String           @id @default(cuid())
  username        String           @unique
  email           String           @unique
  password        String
  firstName       String?
  lastName        String?
  role            UserRole
  points          Int              @default(0)
  experience      Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  avatarUrl       String?
  phone           String?
  specialization  String?
  bio             String?          @db.Text
  preferences     Json?

  // Relations
  classroom       Classroom?       @relation("ClassroomTutor")
  students        User[]           @relation("TutorStudents")
  tutor           User?            @relation("TutorStudents", fields: [tutorId], references: [id])
  tutorId         String?
  classroomStudents Classroom?     @relation("ClassroomStudents", fields: [studentClassroomId], references: [id])
  studentClassroomId String?

  // Event relations
  createdEvents   Event[]          @relation("EventCreator")
  eventsForTutor  Event[]          @relation("TutorEvents")
  eventParticipations EventParticipant[] @relation("UserParticipations")

  // Store relations
  studentRequests ItemRequest[]    @relation("StudentRequests")
  tutorApprovals  ItemRequest[]    @relation("TutorApprovals")

  // Points relations
  studentPoints   PointsTransaction[] @relation("StudentPoints")
  tutorPoints     PointsTransaction[] @relation("TutorPoints")

  // Notes relations
  studentNotes    StudentNote[]    @relation("StudentNotes")
  tutorNotes      StudentNote[]    @relation("TutorNotes")

  // Reports relations
  studentReports  StudentReport[]  @relation("StudentReports")
  tutorReports    StudentReport[]  @relation("TutorReports")

  // Registration relations
  processedRegistrations RegistrationRequest[]

  // Experience relations
  experienceReceived ExperienceTransaction[] @relation("StudentExperience")
  experienceGiven   ExperienceTransaction[] @relation("TutorExperience")

  // Wish relations
  wishes          Wish[]           @relation("StudentWishes")

  // New relation
  createdCards PointEarningCard[] @relation("AdminCards")
  createdReasons PointReason[] @relation("AdminReasons")

  // Announcement relations
  createdAnnouncements Announcement[] @relation("AdminAnnouncements")

  @@index([tutorId])
}

model Classroom {
  id            String    @id @default(uuid())
  name          String    @default("Sınıf")
  description   String?   @default("Öğretmen ve öğrencileri")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  tutor         User      @relation("ClassroomTutor", fields: [tutorId], references: [id])
  tutorId       String    @unique // One tutor per classroom
  students      User[]    @relation("ClassroomStudents")
}

model Event {
  id            String    @id @default(uuid())
  title         String
  description   String
  startDateTime DateTime
  endDateTime   DateTime?
  location      String    @default("Online")
  type          EventType @default(YUZ_YUZE)
  capacity      Int       @default(20)
  points        Int       @default(0)
  experience    Int       @default(0)
  tags          String[]
  status        EventStatus @default(YAKINDA)
  eventScope    EventScope @default(GROUP)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  createdBy     User      @relation("EventCreator", fields: [createdById], references: [id])
  createdById   String
  participants  EventParticipant[] @relation("EventParticipations")
  createdForTutor User?   @relation("TutorEvents", fields: [createdForTutorId], references: [id])
  createdForTutorId String?
}

model EventParticipant {
  id            String    @id @default(uuid())
  status        ParticipantStatus @default(REGISTERED)
  registeredAt  DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  event         Event     @relation("EventParticipations", fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String
  user          User      @relation("UserParticipations", fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  // Unique constraint to prevent duplicate participants
  @@unique([eventId, userId])
}

model StoreItem {
  id              String    @id @default(uuid())
  name            String    @unique
  description     String
  pointsRequired  Int
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  itemRequests    ItemRequest[]
}

model RegistrationRequest {
  id              String    @id @default(uuid())
  username        String
  email           String
  password        String
  firstName       String?
  lastName        String?
  requestedRole   UserRole  @default(STUDENT)
  status          RequestStatus @default(PENDING)
  rejectionReason String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  processedBy     User?     @relation(fields: [processedById], references: [id])
  processedById   String?
}

model ItemRequest {
  id          String    @id @default(uuid())
  status      RequestStatus @default(PENDING)
  pointsSpent Int
  note        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student     User      @relation("StudentRequests", fields: [studentId], references: [id])
  studentId   String
  tutor       User      @relation("TutorApprovals", fields: [tutorId], references: [id])
  tutorId     String
  item        StoreItem @relation(fields: [itemId], references: [id])
  itemId      String
}

model PointsTransaction {
  id          String    @id @default(uuid())
  points      Int
  type        TransactionType
  reason      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student     User      @relation("StudentPoints", fields: [studentId], references: [id])
  studentId   String
  tutor       User      @relation("TutorPoints", fields: [tutorId], references: [id])
  tutorId     String
  pointReason PointReason? @relation("ReasonTransactions", fields: [pointReasonId], references: [id])
  pointReasonId String?
}

model ExperienceTransaction {
  id          String    @id @default(uuid())
  amount      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student     User      @relation("StudentExperience", fields: [studentId], references: [id])
  studentId   String
  tutor       User      @relation("TutorExperience", fields: [tutorId], references: [id])
  tutorId     String
}

model Wish {
  id          String      @id @default(uuid())
  title       String
  description String      @db.Text
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  student     User        @relation("StudentWishes", fields: [studentId], references: [id])
  studentId   String
}

model StudentNote {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   User     @relation("StudentNotes", fields: [studentId], references: [id])
  studentId String
  tutor     User     @relation("TutorNotes", fields: [tutorId], references: [id])
  tutorId   String

  @@index([studentId])
  @@index([tutorId])
}

model StudentReport {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student   User     @relation("StudentReports", fields: [studentId], references: [id])
  studentId String
  tutor     User     @relation("TutorReports", fields: [tutorId], references: [id])
  tutorId   String

  @@index([studentId])
  @@index([tutorId])
}

model PointEarningCard {
  id          String    @id @default(uuid())
  title       String
  description String
  points      Int
  minPoints   Int?      // Minimum points for range
  maxPoints   Int?      // Maximum points for range
  icon        String?   // Store the icon name or URL (optional)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  // Relations
  createdBy   User      @relation("AdminCards", fields: [createdById], references: [id])
  createdById String
}

model PointReason {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy   User      @relation("AdminReasons", fields: [createdById], references: [id])
  createdById String
  transactions PointsTransaction[] @relation("ReasonTransactions")
}

model Announcement {
  id          String    @id @default(uuid())
  title       String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  createdBy   User      @relation("AdminAnnouncements", fields: [createdById], references: [id])
  createdById String
} 